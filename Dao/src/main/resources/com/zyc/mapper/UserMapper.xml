<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyc.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.zyc.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="usermail" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="usernickname" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userpassword" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="usertype" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>

  </resultMap>

  <resultMap id="BaseResultMapWithPower" type="com.zyc.model.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="usermail" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="usernickname" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="userpassword" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="usertype" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
    <collection property="roles" ofType="com.zyc.model.Role">
      <id column="roleid" property="roleid"/>
      <result column="rolename" property="rolename"/>
    </collection>
    <collection property="powers" ofType="com.zyc.model.Power">
      <id column="powerid" property="powerid"/>
      <result column="powername" property="powername"/>
    </collection>
  </resultMap>

  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, usermail, username, usernickname, userpassword, usertype
  </sql>
  <select id="selectByExample" parameterType="com.zyc.model.UserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from User
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.zyc.model.UserExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from User
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.zyc.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into User
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="usermail != null">
        usermail,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="usernickname != null">
        usernickname,
      </if>
      <if test="userpassword != null">
        userpassword,
      </if>
      <if test="usertype != null">
        usertype,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="usermail != null">
        #{usermail,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="usernickname != null">
        #{usernickname,jdbcType=VARCHAR},
      </if>
      <if test="userpassword != null">
        #{userpassword,jdbcType=VARCHAR},
      </if>
      <if test="usertype != null">
        #{usertype,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zyc.model.UserExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from User
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update User
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.usermail != null">
        usermail = #{record.usermail,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.usernickname != null">
        usernickname = #{record.usernickname,jdbcType=VARCHAR},
      </if>
      <if test="record.userpassword != null">
        userpassword = #{record.userpassword,jdbcType=VARCHAR},
      </if>
      <if test="record.usertype != null">
        usertype = #{record.usertype,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update User
    set id = #{record.id,jdbcType=INTEGER},
      usermail = #{record.usermail,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      usernickname = #{record.usernickname,jdbcType=VARCHAR},
      userpassword = #{record.userpassword,jdbcType=VARCHAR},
      usertype = #{record.usertype,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zyc.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update User
    <set>
      <if test="usermail != null">
        usermail = #{usermail,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="usernickname != null">
        usernickname = #{usernickname,jdbcType=VARCHAR},
      </if>
      <if test="userpassword != null">
        userpassword = #{userpassword,jdbcType=VARCHAR},
      </if>
      <if test="usertype != null">
        usertype = #{usertype,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectUserWithPower" parameterType="com.zyc.model.UserExample" resultMap="BaseResultMapWithPower">
    SELECT
    id,
    usermail,
    username,
    usernickname,
    userpassword,
    usertype,
    h.roleid,
    h.rolename,
    i.powerid,
    i.powername
    FROM
    power i
    INNER JOIN (
      SELECT
      id,
      usermail,
      username,
      usernickname,
      userpassword,
      usertype,
      e.roleid,
      rolename,
      f.powerid
      FROM
      RoleToPower f
      INNER JOIN (
        SELECT
        id,
        usermail,
        username,
        usernickname,
        userpassword,
        usertype,
        c.roleid,
        rolename
        FROM
        role d
        INNER JOIN (
          SELECT
          id,
          usermail,
          username,
          usernickname,
          userpassword,
          usertype,
          roleid
          FROM
          UserToRole b
          INNER JOIN `User` a ON a.id = b.userid
          <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
          </if>
        ) c ON d.roleid = c.roleid
      ) e ON e.roleid = f.roleid
    ) h ON h.powerid = i.powerid
  </select>
  <select id="selectUserWithPowerByPrimaryKey" parameterType="int" resultMap="BaseResultMapWithPower">
    SELECT
    id,
    usermail,
    username,
    usernickname,
    userpassword,
    usertype,
    h.roleid,
    h.rolename,
    i.powerid,
    i.powername
    FROM
    power i
    INNER JOIN (
    SELECT
    id,
    usermail,
    username,
    usernickname,
    userpassword,
    usertype,
    e.roleid,
    rolename,
    f.powerid
    FROM
    RoleToPower f
    INNER JOIN (
    SELECT
    id,
    usermail,
    username,
    usernickname,
    userpassword,
    usertype,
    c.roleid,
    rolename
    FROM
    role d
    INNER JOIN (
    SELECT
    id,
    usermail,
    username,
    usernickname,
    userpassword,
    usertype,
    roleid
    FROM
    UserToRole b
    INNER JOIN `User` a ON a.id = b.userid
    where a.id = #{id}
    ) c ON d.roleid = c.roleid
    ) e ON e.roleid = f.roleid
    ) h ON h.powerid = i.powerid
  </select>
</mapper>